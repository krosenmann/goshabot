#+TITLE: Попытки асинхронного программирования на примере бота для Discord
#+AUTHOR: Roman Zayrullin
#+EMAIL: krosenmann@gmail.com
#+STARTUP: showall
#+TAGS: DBOT(b) 

* Где хранить?
  #+NAME dependencys
  #+BEGIN_EXAMPLE
  gspread oauth2client
  #+END_EXAMPLE
  Вместо баз данных проще и прикольнее оказалось использовать гуглодоки, т.к. и
  еще можно редактировать отдельно. Т.е подобавлять новые команды,
  новые данные в адвенчуры и викторины и т.д.
  #+NAME gspread
  #+BEGIN_SRC python :tangle yes :var table_name="Discord Test" :results output
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials


    class Storage:

        def __init__(self, sheetname):
            self._authorise(self)
            self.sheet = self.client.open(sheetname).sheet1

        def _authorise(self) -> None:
            SCOPE = ['https://spreadsheets.google.com/feeds']
            credentials = ServiceAccountCredentials.from_json_keyfile_name(
                'client_secret.json', SCOPE)
            self.client = gspread.authorize(credentials)

        def pack_from_table(self) -> dict:
            pass
  #+END_SRC

  #+RESULTS:

* 
  Ненавижу дебажить асинхронщину, потому что ее очень тяжко
  дебажить. Вывод -- а почему бы не писать асинхронщину
  синхронно? :confused:
  #+name: basecommand
  #+begin_src python :tangle basecommand.py :results silent
    import os


    class Command:
        def run(self):
            pass

        def show_source(self):
            with open(os.path.basename(__file__)) as file:
                src = file.read()
            return src
  #+end_src
  Тащемта тут один хуй должен быть враппер под асинхронщину.
  #+NAME main-import
  #+BEGIN_SRC python :var DISCORD_AUTH_TOKEN = <token>
    import discord
    import asyncio

    <<bashic>>

    class Goshabot:

        client = discord.Client()

        @client.event
        async def on_ready() -> None:
            pass

        @client.event
        async def on_message(message) -> None:
            pass

    Goshabot().client.run(DISCORD_AUTH_TOKEN)
  #+END_SRC
  
  Для использования нужно добавить переменную окружения
  DISCORD_AUTH_TOKEN: 
  ~$ export DISCORD_AUTH_TOKEN=<token>~
  #+NAME run_client
  #+BEGIN_SRC python 
    client.run(os.environ.get('DISCORD_AUTH_TOKEN'))
  #+END_SRC

** TODO при запуске стрима на твиче\ютубе кидает уведомление на определенный текстовый канал :DBOT:
   name live on *
   game | title

   команда: !twitch name; !youtube name
   Для забора этой штуки нужно подключаться уже к апи твича, и
   периодически его опрашивать. Или(!) можно чекать в самом
   дискорде. Надо посмотреть, как обстоят дела в либе
   дискорда. 
   Варинты:
   - Периодически чекать состояние стримов стримеров из списка
   - Чекать по запросу. 
   Оповещения с помощью /tts???
   Стримеров добавлять через команды чата (права у админов) или через
   сам гуглодок. 
   Так же по новым видосам.

** TODO на определенном канале запускать викторину с вопросами из текстового файла :DBOT:

   команда: !victory и !stop

   самый сложный кусок. Пока нет мыслей. 

** DONE рандомная шутка из башорга или ithappens                       :DBOT:
   #+NAME: imports   
   #+begin_src python :python /usr/bin/python3
     import requests
     import re
   #+end_src

   #+RESULTS: imports
   : None

   Сделать красиво, бля.
   команда: !bash; !it
   #+NAME bashic
   #+HEADERS: :python /usr/bin/python3
   #+BEGIN_SRC python :tangle bash.py :return Bash().send_joke() :exports results :noweb yes 
     <<imports>>


     class Bash(str):
         EBASHIM = 'http://bash.im/forweb/?u'

         def send_joke(self) -> str:
             shuteika = requests.request('GET', self.EBASHIM)
             shuteika = shuteika.content.decode('utf-8')
             shuteika = shuteika.replace("<' + 'br>", "\n")
             shuteika = shuteika.replace("<' + 'br />", "\n")
             shuteika = shuteika.replace("&quot;", "''")
             shuteika = shuteika.replace("&lt;", "'")
             shuteika = shuteika.replace("&gt;", "'")
             shuteika = re.sub(r'var[\w\W]*;\"\>', '', shuteika)
             shuteika = shuteika[:shuteika.index('<\' + \'/div>')]
             return shuteika
   #+END_SRC

   #+RESULTS:
   : xxx: суть: на проекте, который должен был выйти 1го августа есть таймлайн. который не работает. об этом был в курсе ведущий фронтенд, который уволился, и менеджер проекта, который уволился
   : xxx: теперь вот я в курсе
   : xxx: и в общем я знаю, что мне делать))))

** DONE рандомная картинка                                             :DBOT:
   CLOSED: [2017-11-24 Пт 10:59] DEADLINE: <2017-08-06 Вс> SCHEDULED: <2017-08-03 Чт>

   команды стоит создать по названиям сайтов или по тематикам 
   САЙТЫ: 9gag, рандом гугль пикча хз (откуда вообще лучше и легче
   будет выдергивать?)
   #+NAME: f9gag
   #+HEADERS: :python /usr/bin/python3
   #+BEGIN_SRC python :return NineGag().get_pivk() :exports no :results silent :noweb yes :tangle NineGag.py
     import requests
     <<basecommand>>

     class NineGag(Command):
         def get_pivk(self) -> str:
             pick = requests.request('GET', 'http://9gag.com/random')
             img_name = pick.url.split('/')[-1]
             img_url = "http://img-9gag-fun.9cache.com/photo/{}_700b.png".format(
                 img_name)
             return img_url
   #+END_SRC
   
   #+RESULTS: f9gag
   : http://img-9gag-fun.9cache.com/photo/apQXw79_700b.png

   #+BEGIN_SRC shell :var IMG_URL=f9gag :file example.png :exports results
     curl $IMG_URL 
   #+END_SRC

   #+RESULTS:
   [[file:example.png]]

** TODO Приветствовалки и оповещалки о новых петучах на серваке тоже норм. Именно оповещалка. :DBOT:
   Уведомление о смене роли, например, тоже подойдёт.
   Вот тут хорошо зайдет ттс!

** Show Your Source
   ~!show_source <command>~ - Показывает файл, реализующий команду
   #+begin_src python :results output :exports results :noweb yes :results code
     from NineGag import NineGag
     print(NineGag().show_source())
   #+end_src

   #+RESULTS:
   #+BEGIN_SRC python
   import requests
   import os


   class Command:
       def run(self):
           pass

       def show_source(self):
           with open(os.path.basename(__file__)) as file:
               src = file.read()
           return src

   class NineGag(Command):
       def get_pivk(self) -> str:
           pick = requests.request('GET', 'http://9gag.com/random')
           img_name = pick.url.split('/')[-1]
           img_url = "http://img-9gag-fun.9cache.com/photo/{}_700b.png".format(
               img_name)
           return img_url

   #+END_SRC

* Process
